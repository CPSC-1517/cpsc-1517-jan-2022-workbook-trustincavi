using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

#region Additional Namespaces
using WestWindSystem.BLL;       //this is where the services were coded
using WestWindSystem.Entities;  //this is where the entity definition is coded
using WebApp.Helpers;           //this is where the Paginator is coded
#endregion


namespace WebApp.Pages.Samples
{
    public class ProductCRUDModel : PageModel
    {
        #region Private service fields & class constructor
        private readonly ILogger<IndexModel> _logger;
        private readonly ProductServices _productServices;
        private readonly CategoryServices _categoryServices;
        private readonly SupplierServices _supplierServices;


        public ProductCRUDModel(ILogger<IndexModel> logger,
            ProductServices productservices,
            CategoryServices categoryservices,
            SupplierServices supplierservices)
        {
            _logger = logger;
            _productServices = productservices;
            _categoryServices = categoryservices;
            _supplierServices = supplierservices;

        }
        #endregion

        #region Feedback and Error Messages

        [TempData]
        public string Feedback { get; set; }

        public bool HasFeedback => !string.IsNullOrWhiteSpace(Feedback);

        public string ErrorMessage { get; set; }

        public bool HasError => !string.IsNullOrWhiteSpace(ErrorMessage);

        #endregion


        [BindProperty(SupportsGet = true)]
        public int? productid { get; set; }

        [BindProperty]
        public Product ProductInfo { get; set; }

        [BindProperty]
        public List<Category> CategoryList { get; set; } = new();

        [BindProperty]
        public List<Supplier> SupplierList { get; set; } = new();

        public void OnGet()
        {
            // PRG (Post redirect on Get)
            PopulateLists();
            if (productid.HasValue && productid > 0)
            {
                ProductInfo = _productServices.Product_GetById((int)productid);
            }

        }
        public void PopulateLists()
        {
            CategoryList = _categoryServices.Category_List();
            SupplierList = _supplierServices.Supplier_List();
        }

        public IActionResult OnPostClear()
        {
            Feedback = "";
            //searcharg = null;
            ModelState.Clear();
            return RedirectToPage(new { productid = (int?)null });
        }

        public IActionResult OnPostSearch()
        {
            return RedirectToPage("/Samples/CategoryProducts");
        }

        public IActionResult OnPostNew()
        {
            // Forces client side validation to re-execute.
            if (ModelState.IsValid)
            {
                // try/catch error handling is used to catch errors
                //   generated by the execution of the BLL service.
                try
                {
                    // Any BindProperty will have the current control contents
                    //   in the property.
                    // If you expect to receive a value from the BLL service,
                    //   you can caught the value in a local variable.
                    // In this example, we're expecting the new product ID
                    //   to be returned form the BLL services.
                    int newproductid = _productServices.Product_AddProduct(ProductInfo);

                    // Always give feedback to the client user.
                    Feedback = $"Product id ({newproductid}) has been added to the system";

                    // Return needed due to IActionResult
                    return RedirectToPage(new { productid = productid });
                }
                catch (ArgumentNullException ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
                catch (Exception ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    // Reload any list that are being used on the form.
                    // Example: a list (collection) for a dropdown control.
                    PopulateLists();

                    // Stay on the "same" page
                    // The idea is not to "leave" the current page.
                    // This is required because you are using IActionResult
                    // as a return datatype for this method.
                    return Page();
                }
            }
            else
            {
                // If you are using ModelState AND are in need of re-populating LISTs
                // (for select, or group of radiobuttons, etc.),
                // you will need to re-obtain the lists.
                PopulateLists();
            }
            return Page();
        }

        public IActionResult OnPostUpdate()
        {
            if (ModelState.IsValid)
            {
                try
                {
                    int rowaffected = _productServices.Product_UpdateProduct(ProductInfo);
                    if (rowaffected > 0)
                    {
                        Feedback = $"Product id ({rowaffected}) has been updated.";
                    }
                    else
                    {
                        Feedback = $"No product was affected. Refresh search and try again.";
                    }
                    return RedirectToPage(new { productid = productid });
                }
                catch (ArgumentNullException ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
                catch (Exception ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
            }
            return Page();
        }

        public IActionResult OnPostDelete()
        {
            if (ModelState.IsValid)
            {
                try
                {
                    // This is a logical delete (actually an update)
                    int rowaffected = _productServices.Product_DeleteProduct(ProductInfo);
                    if (rowaffected > 0)
                    {
                        Feedback = $"Product id ({rowaffected}) has been deleted.";
                    }
                    else
                    {
                        Feedback = $"No product was affected. Refresh search and try again.";
                    }
                    return RedirectToPage(new { productid = productid });
                }
                catch (ArgumentNullException ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
                catch (Exception ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
            }
            else
            {
                PopulateLists();
            }
            return Page();
        }

        private Exception GetInnerException(Exception ex)
        {
            // Drill down to the real error message
            while (ex.InnerException != null)
                ex = ex.InnerException;
            return ex;
        }

    }
}
