@page "{productid?}"
@model WebApp.Pages.Samples.ProductCRUDModel
@{
    ViewData["Title"] = "Product Maintenance";

}

<style>
    :root {
        --max-body-width: 60rem;
    }

    .setflex {
        display: flex;
    }

    .onethird {
        width: 31%;
        margin-right: 2%;
    }

    .onehalf {
        width: 47%;
        margin-right: 3%;
    }

    .smallbox {
        width: 60px;
    }
</style>

@* Include the validation library on thw web page.
    This is done by using the RenderSection Scripts located on the _Layout page.

    RenderSections can e placed anywhere on your cshtml page.
*@
@section Scripts {
    @* Check the validation script file name in Shared folder *@
<partial name="_ValidationScriptsPartial" />
}

<h1>Product Maintenance: CRUD Product ID : @Model.productid</h1>

@if (Model.HasFeedback)
{
    <p>@Model.Feedback</p>
}
@if (Model.HasError)
{
    <p>@Model.ErrorMessage</p>
}

<form method="post">

    @* TODO: setup the parts of the Product*@

    @* Create a control that will hold the product PK value.
        This control should NOT be changable IF you PK is IDENTITY.
        This control can be visible (type="text") or hidden (type="hidden"), 
        which is a design consideration.
    *@
    <label>
        ID:
        @if (Model.ProductInfo == null)
        {
            <input type="text" asp-for="ProductInfo.ProductID" readonly data-val="false"
               value="0" />
               @* Neu null ma ko set value = 0 o day thi se bi loi validation *@
        }
        else
        {
            <input type="text" asp-for="ProductInfo.ProductID" readonly data-val="false" />
        }
        <span asp-validation-for="ProductInfo.ProductID"></span>
    </label>
    <label>
        Name:
        <input type="text" asp-for="ProductInfo.ProductName" placeholder="product name" />
        <span asp-validation-for="ProductInfo.ProductName"></span>
    </label>
    <label>
        Category:
        <select asp-for="ProductInfo.CategoryID">
            @foreach (var item in Model.CategoryList)
            {
                <option value="@item.CategoryID"
                    selected=@(Model.ProductInfo != null && item.CategoryID == Model.ProductInfo.CategoryID)>
                    @item.CategoryName
                </option>
            }
        </select>
        <span asp-validation-for="ProductInfo.CategoryID"></span>
    </label>
    <label>
        Supplier:
        <select asp-for="ProductInfo.SupplierID">
            @foreach (var item in Model.SupplierList)
            {
                <option value="@item.SupplierID"
                    selected=@(Model.ProductInfo != null && item.SupplierID == Model.ProductInfo.SupplierID)>
                    @item.CompanyName
                </option>
            }
        </select>
        <span asp-validation-for="ProductInfo.SupplierID"></span>
    </label>
    <label>
        Unit Size:
        <input type="text" asp-for="ProductInfo.QuantityPerUnit" placeholder="unit size" />
        <span asp-validation-for="ProductInfo.QuantityPerUnit"></span>
    </label>
    <label>
        Min Order Qty:
        <input type="number" asp-for="ProductInfo.MinimumOrderQuantity" placeholder="minimum order qty"
               step="1" min="1" />
        <span asp-validation-for="ProductInfo.MinimumOrderQuantity"></span>
    </label>
    <label>
        Unit Price:
        <input type="number" asp-for="ProductInfo.UnitPrice" placeholder="unit price"
               step="0.01" min="0.00" />
        <span asp-validation-for="ProductInfo.UnitPrice"></span>
    </label>
    <label>
        QOO:
        <input type="text" asp-for="ProductInfo.UnitsOnOrder" placeholder="units on order"
               disabled="true" />
        <span asp-validation-for="ProductInfo.UnitsOnOrder"></span>

    </label>
    @* for a checkbox, the transfer of data by default is either: not checked -> null, checked -> on
        IF you are expecting a boolean (true or false) then use the attribute value="true"
        this will result in: not checked -> null, checked -> true
        Why does this work. REMEMBER: when an instance is create, the properties in your instance
        will be set to: a) system defaults depending on datatype or b) constructor assignments.
        THEREFORE the default of a boolean property will be "false"
    *@
    <label>
        Discontinued:
        <input type="checkbox" asp-for="ProductInfo.Discontinued" value="true" />
        &nbsp;&nbsp; (discontinued if checked)
        <span asp-validation-for="ProductInfo.Discontinued"></span>
    </label>
    <br /><br />

    @* Managing the buttons, restricting user access*@
    @if (Model.ProductInfo != null)
    {
        <button type="submit" asp-page-handler="New" disabled>Save New</button>
        <button type="submit" asp-page-handler="Update">Update</button>
        @* add Javascript prompt for delete confirmation using the onclick *@
        <button type="submit" asp-page-handler="Delete" formnovalidate
            onclick="return confirm('Are you sure you wish to discontinue the product?')">
            Delete/Discontinue
        </button>
        <button type="submit" asp-page-handler="Clear" formnovalidate>Clear</button>
        <button type="submit" asp-page-handler="Search" formnovalidate>Search</button>
    }
    else
    {
        <button type="submit" asp-page-handler="New">Save New</button>
        <button type="submit" asp-page-handler="Update" disabled>Update</button>
        @* add Javascript prompt for delete confirmation using the onclick *@
        <button type="submit" asp-page-handler="Delete" formnovalidate disabled
            onclick="return confirm('Are you sure you wish to discontinue the product?')">
            Delete/Discontinue
        </button>
        <button type="submit" asp-page-handler="Clear" formnovalidate>Clear</button>
        <button type="submit" asp-page-handler="Search" formnovalidate>Search</button>
    }
</form>